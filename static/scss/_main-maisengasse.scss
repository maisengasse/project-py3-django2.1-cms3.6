// Büro Maisengasse 2019

//  1.) Helpers
//  2.) Animation
//  3.) Tilted Edges
//  4.) Utils


// –––––––––––––––––––––––––––––– 1.) Helpers ––––––––––––––––––––––––––––––
.overflow {
	display: block;;
	overflow: hidden;
	text-indent: -999px;
}

.hyphenate {
  -webkit-hyphens: auto;
  -ms-hyphens: auto;
  hyphens: auto;
}

.tooltip {
    margin-bottom: 10px;
    .tooltip-inner {
        max-width: 250px;
        padding: 15px;
        color: $white;
        text-align: left;
        background-color: $brand-primary;
        border-color: $brand-primary;
        border-radius: 0;
    }
    .arrow {
        display: none; 
    }
}

// –––––––––––––––––––––––––––––- 2.) Animacion! –––––––––––––––––––––––––––



// –––––––––––––––––––––––––––––– 3.) Tilted Edges ––––––––––––––––––––––––––––––
@mixin angle($pseudo, $flip: false, $angle: 20deg) {
  // Possible values for $pseudo are: before, after, both
  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
    position: relative;
    z-index: 1;
    $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

    #{$selector} {
      background: inherit;
      content: '';
      display: block;
      height: 100%;
      left: -10px;
      position: absolute;
      right: -10px;
      z-index: -1;
      -webkit-backface-visibility: hidden; // for Chrome Windows
    }

    @if $pseudo == 'before' {
      #{$selector} {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo == 'after' {
      #{$selector} {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo == 'both' {
      &:before {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}

// slanted tilts here
.tilt--bottom {
  @include angle(after);
}

.tilt--bottom--reverse {
  @include angle(after, true);
}

.tilt--top {
  @include angle(before);
}

.tilt--top--reverse {
  @include angle(before, true);
}

.tilt--both {
  @include angle(both);
}

.tilt--both--reverse {
  @include angle(both, true);
}

// –––––––––––––––––––––––––––––– 4.) Utils ––––––––––––––––––––––––––––––
/*
  This mixin can be used to set the object-fit:
  @include object-fit(contain);
  or object-fit and object-position:
  @include object-fit(cover, top);
*/
@mixin object-fit($fit: fill, $position: null){
	-o-object-fit: $fit;
	object-fit: $fit;
	@if $position {
		-o-object-position: $position;
		object-position: $position;
  		font-family: 'object-fit: #{$fit}; object-position: #{$position}';
  	} @else {
  		font-family: 'object-fit: #{$fit}';
  	}
}

// generic transform
@mixin transform($transforms) {
       -moz-transform: $transforms;
         -o-transform: $transforms;
        -ms-transform: $transforms;
    -webkit-transform: $transforms;
          	transform: $transforms;
}

// rotate
@mixin rotate ($deg) {
	@include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
     @include transform(scale($scale));
}

// translate
@mixin translate ($x, $y) {
	@include transform(translate($x, $y));
}

// skew
@mixin skew ($x, $y) {
	@include transform(skew(#{$x}deg, #{$y}deg));
}

//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
         -o-transform-origin: $origin;
        -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
          transform-origin: $origin;
}

//sticky
@mixin sticky($top) {
	position: -webkit-sticky;
	position: -moz-sticky;
	position: -ms-sticky;
	position: -o-sticky;
	position: sticky;
	top: $top;
}

// pseudo
@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}
